#ifndef RPARSER_MIXINGDATA_H
#define RPARSER_MIXINGDATA_H

#include "common.h"
#include "TimingData.h"

namespace rparser
{

namespace playablechart
{

// Charge note type for mixing object
enum class CNTYPE
{
  NONE = 0,
  BMS,    // BMS type (no judge at the end of the CN)
  CN,     // IIDX charge note type
  HCN,    // IIDX hell charge note type
};

/*
* @description
* Soundable(Renderable) object in MixingData.
* State is not stored; should be generated by oneself if necessary.
*/
struct Note
{
  Note *n;

  // mixing related

  bool ismixable;
  uint32_t cmd;
  uint32_t cmdarg;
  uint32_t value_start;
  uint32_t value_end;
  double time_start_ms;
  double time_end_ms;
  bool loop;

  // playing related

  bool isplayable;
  CNTYPE cntype;
  unsigned int lane;
  rowid_t row_start;
  rowid_t row_end;

  // mouse motion related (osu!)

  void* mouse_ptrs[64];
  int mouse_ptr_len;

  // reference pointer to original Note object

  Note* obj_start;
  Note* obj_end;
};

class rparser::chart::Chart;

/*
 * \detail
 * Mixable/Playable (timing info appended) chart object.
 *
 * \warn
 * Dependent to original chart data so don't change it when refering ChartMixing class.
 *
 * \params
 * ...
 */
class PlayableChart
{
public:
	PlayableChart();
	PlayableChart(const rparser::chart::Chart& c, bool notedeepcopy = false);
	~PlayableChart();

	std::vector<Note>& GetNotes();
	const TimingData& GetTimingdata() const;
	const MetaData& GetMetadata() const;
private:
	std::vector<Note> mixingnotes_;
	TimingData* timingdata_;
	const MetaData* metadata_;
};

} /* namespace playablechart */

} /* namespace rparser */

#endif
